buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'

targetCompatibility = 1.7
sourceCompatibility = 1.7

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

def AssasinManifest = {
    attributes 'Main-Class': 'focssyAssasin.FocssyAssasin'
}

version = "${config.project_version}"
group = "focssy" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "focssy"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'res'
        }
    }
}

processResources {
    //redo task if any of these properties change
    inputs.property "forge_version", config.forge_version
    inputs.property "minecraft_version", config.minecraft_version
    inputs.property "project_version", config.project_version

    // Replace properties in info files
    from(sourceSets.main.resources.srcDirs) {
        include '*.info'
        expand 'project_version':config.project_version,'minecraft_version':config.minecraft_version,'forge_version':config.forge_version
    }
}

// Output of reobf task
ext.jarFile = reobf.outputs.files.each{}.collect{ zipTree(it) }
task fassasin(type: Jar,dependsOn: reobf) {
    from (project.ext.jarFile) {
    	include "**/focssyAssasin/*.class"
    }
    archiveName = "focssyAssasin.jar"
    manifest AssasinManifest
}
task fscanner(type: Jar,dependsOn: [reobf,fassasin]) {
    from (project.ext.jarFile) {
    	include "**/focssyScanner/*.class"
        include "focssyScanner.info"
        rename ("focssyScanner.info", 'mcmod.info')
    }
    from("$projectDir/build/libs"){
        include "focssyAssasin.jar"
    }
    archiveName = "focssyScanner.jar"
}
task fmain(type: Jar,dependsOn: [reobf,fassasin]) {
    from (project.ext.jarFile) {
        include "**/focssy/*.class"
        include "focssy.info"
        rename ("focssy.info", 'mcmod.info')
    }
    from("$projectDir/build/libs"){
        include "focssyAssasin.jar"
    }
    archiveName = "focssy.jar"
}

fmain.mustRunAfter { tasks.findAll { task -> (task.name.startsWith('f') && !task.name.equals('fmain')) } }

gradle.taskGraph.afterTask { task, TaskState state ->
    if (task == fmain) {
        // Delete original jar now it has been split into separate jars.
        reobf.outputs.files.each{delete it}
    }
}

artifacts {
    archives fassasin, fscanner, fmain
}